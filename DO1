import torch
import torch.nn as nn
import torch.fft
import numpy as np
import math

# --- Utility and Helper Functions ---

def create_grid(H, W, dx_m, device='cpu'):
    """
    Creates spatial and frequency grids.
    Args:
        H (int): Height of the grid.
        W (int): Width of the grid.
        dx_m (float or tuple): Pixel pitch in meters (dy_m, dx_m). If float, assumes square pixels.
        device (str): PyTorch device.
    Returns:
        x_coords (torch.Tensor): X coordinates (m).
        y_coords (torch.Tensor): Y coordinates (m).
        fx_coords (torch.Tensor): X spatial frequencies (1/m).
        fy_coords (torch.Tensor): Y spatial frequencies (1/m).
    """
    if isinstance(dx_m, float):
        dy_m = dx_m
    else:
        dy_m, dx_m = dx_m

    x = torch.arange(-W // 2, W // 2, device=device) * dx_m
    y = torch.arange(-H // 2, H // 2, device=device) * dy_m
    y_coords, x_coords = torch.meshgrid(y, x, indexing='ij')

    fx_cycles_sample = torch.fft.fftfreq(W, d=1.0, device=device)
    fy_cycles_sample = torch.fft.fftfreq(H, d=1.0, device=device)

    fy_coords_mesh, fx_coords_mesh = torch.meshgrid(fy_cycles_sample, fx_cycles_sample, indexing='ij')
    fy_coords_phys_mesh = fy_coords_mesh / dy_m
    fx_coords_phys_mesh = fx_coords_mesh / dx_m

    return x_coords, y_coords, fx_coords_phys_mesh, fy_coords_phys_mesh


def generate_zernike_basis(num_coeffs, H, W, radius_pix, device='cpu'):
    """
    Generates a basis of Zernike polynomials on a Cartesian grid.
    This is a simplified placeholder. A robust implementation would use
    standard Zernike generation formulas (e.g., using OSA/ANSI indexing).
    """
    # print(f"Generating a placeholder Zernike basis of {num_coeffs} polynomials...") # Optional print
    zernike_basis = torch.zeros((H, W, num_coeffs), device=device)
    y_norm = torch.linspace(-1, 1, H, device=device) # Normalized coordinates for Zernike definition
    x_norm = torch.linspace(-1, 1, W, device=device)
    yy_norm, xx_norm = torch.meshgrid(y_norm, x_norm, indexing='ij')
    
    # Scale normalized coordinates to fit within the given radius_pix for masking
    # This assumes the Zernike polynomials are defined over a unit disk,
    # and we map our grid pixels to this unit disk.
    # The radius_pix here refers to the extent of the circular pupil in the grid.
    # For Zernike definition, rho and phi are usually on a normalized disk.
    rho = torch.sqrt(xx_norm**2 + yy_norm**2)
    phi = torch.atan2(yy_norm, xx_norm)

    mask = (rho <= 1.0) # Zernikes are defined within a unit circle

    if num_coeffs > 0: zernike_basis[..., 0] = mask * 1.0  # Piston
    if num_coeffs > 1: zernike_basis[..., 1] = mask * 2.0 * rho * torch.cos(phi)  # Tip (X-tilt)
    if num_coeffs > 2: zernike_basis[..., 2] = mask * 2.0 * rho * torch.sin(phi)  # Tilt (Y-tilt)
    if num_coeffs > 3: zernike_basis[..., 3] = mask * torch.sqrt(torch.tensor(3.0, device=device)) * (2 * rho**2 - 1)  # Defocus
    if num_coeffs > 4: zernike_basis[..., 4] = mask * torch.sqrt(torch.tensor(6.0, device=device)) * rho**2 * torch.cos(2 * phi) # Astigmatism (0 deg)
    
    for j in range(5, num_coeffs): # Placeholder for higher orders
        zernike_basis[..., j] = mask * rho**(j//2) * torch.cos((j%3+1)*phi) * torch.randn(1, device=device)
    # print("Placeholder Zernike basis generated.") # Optional print
    return zernike_basis


def phase_from_zernike_coeffs(zernike_coeffs, zernike_basis):
    """
    Computes the phase profile from Zernike coefficients and basis.
    """
    phase_profile_opd = torch.einsum('j,hwj->hw', zernike_coeffs, zernike_basis)
    return phase_profile_opd


def propagate_fresnel_pytorch(input_field_n1hw, dx_m, dist_m, wavelength_m):
    """
    Fresnel propagation for a single polarization component (N, 1, H, W).
    """
    N, C, H, W = input_field_n1hw.shape
    device = input_field_n1hw.device
    if C != 1:
        raise ValueError("propagate_fresnel_pytorch expects input_field_n1hw with C=1 (single channel for Ex or Ey)")

    input_field = input_field_n1hw.squeeze(1) # Shape (N, H, W)

    if isinstance(dx_m, float):
        dy_m_in = dx_m
        dx_m_in = dx_m
    else:
        dy_m_in, dx_m_in = dx_m

    x_coords_in, y_coords_in, fx_coords_prop, fy_coords_prop = create_grid(H, W, (dy_m_in, dx_m_in), device=device)

    quad_phase_factor_in = torch.exp(
        1j * torch.pi / (wavelength_m * dist_m) * (x_coords_in**2 + y_coords_in**2)
    ).unsqueeze(0)

    U_prime = input_field * quad_phase_factor_in
    G = torch.fft.fft2(U_prime, norm='ortho')

    propagator_freq = torch.exp(
        1j * torch.pi * wavelength_m * dist_m * (fx_coords_prop**2 + fy_coords_prop**2)
    ).unsqueeze(0)

    Result_freq = G * propagator_freq
    U_sensor_scaled = torch.fft.ifft2(Result_freq, norm='ortho')

    final_scaling_phase = torch.exp(1j * 2 * torch.pi * dist_m / wavelength_m) / \
                          (1j * wavelength_m * dist_m)
    
    output_field = U_sensor_scaled * final_scaling_phase
    return output_field.unsqueeze(1) # Reshape to (N, 1, H, W)

# --- Optical System Module ---
class ZernikePSFOptimizerPolarizedPT(nn.Module):
    def __init__(self, params):
        super().__init__()
        self.params = params
        self.device = params.get('device', 'cuda' if torch.cuda.is_available() else 'cpu')

        self.num_zernike_coeffs = params['num_zernike_coeffs']
        self.wavelength_m = params['wavelength_m']
        self.pupil_diameter_m = params['pupil_diameter_m']
        self.propagation_distance_m = params['propagation_distance_m']
        self.grid_size_h = params['grid_size_h']
        self.grid_size_w = params['grid_size_w']
        
        self.pupil_sample_dy_m = self.pupil_diameter_m / self.grid_size_h
        self.pupil_sample_dx_m = self.pupil_diameter_m / self.grid_size_w

        self.zernike_coeffs = nn.Parameter(torch.zeros(self.num_zernike_coeffs, device=self.device))

        zernike_radius_pix = min(self.grid_size_h / 2, self.grid_size_w / 2)
        _zernike_basis = generate_zernike_basis(
            self.num_zernike_coeffs, self.grid_size_h, self.grid_size_w,
            radius_pix=zernike_radius_pix, device=self.device
        )
        self.register_buffer('zernike_basis_hwj', _zernike_basis)

        y = torch.linspace(-self.grid_size_h // 2, self.grid_size_h // 2 -1, self.grid_size_h, device=self.device) * self.pupil_sample_dy_m
        x = torch.linspace(-self.grid_size_w // 2, self.grid_size_w // 2 -1, self.grid_size_w, device=self.device) * self.pupil_sample_dx_m
        Y, X = torch.meshgrid(y, x, indexing='ij')
        R_sq = X**2 + Y**2
        pupil_radius_sq = (self.pupil_diameter_m / 2)**2
        aperture_mask = (R_sq <= pupil_radius_sq).float().unsqueeze(0).unsqueeze(0) # (1,1,H,W)
        self.register_buffer('aperture_mask_11hw', aperture_mask)

    def forward(self, input_E_complex_n2hw):
        """
        Args:
            input_E_complex_n2hw (torch.Tensor): Input complex E-field (N, 2, H, W).
                                                Channel 0 for Ex, Channel 1 for Ey.
        """
        if input_E_complex_n2hw.shape[1] != 2:
            raise ValueError("Input E-field must have 2 channels (Ex, Ey).")

        # Separate Ex and Ey components
        # Ex_pupil_n1hw will have shape (N, 1, H, W)
        Ex_pupil_n1hw = input_E_complex_n2hw[:, 0:1, :, :]
        Ey_pupil_n1hw = input_E_complex_n2hw[:, 1:2, :, :]

        # 1. Calculate phase OPD from Zernike coefficients (scalar phase shift)
        phase_profile_opd_hw = phase_from_zernike_coeffs(self.zernike_coeffs, self.zernike_basis_hwj)
        phase_shift_11hw = (2 * torch.pi * phase_profile_opd_hw / self.wavelength_m).unsqueeze(0).unsqueeze(0)

        # 2. Apply phase shift independently to Ex and Ey
        Ex_pupil_out_n1hw = Ex_pupil_n1hw * torch.exp(1j * phase_shift_11hw)
        Ey_pupil_out_n1hw = Ey_pupil_n1hw * torch.exp(1j * phase_shift_11hw)
        
        # 3. Apply aperture mask independently
        Ex_apertured_n1hw = Ex_pupil_out_n1hw * self.aperture_mask_11hw
        Ey_apertured_n1hw = Ey_pupil_out_n1hw * self.aperture_mask_11hw

        # 4. Propagate Ex and Ey independently
        dx_m_tuple = (self.pupil_sample_dy_m, self.pupil_sample_dx_m)
        Ex_sensor_n1hw = propagate_fresnel_pytorch(
            Ex_apertured_n1hw, dx_m_tuple, self.propagation_distance_m, self.wavelength_m
        )
        Ey_sensor_n1hw = propagate_fresnel_pytorch(
            Ey_apertured_n1hw, dx_m_tuple, self.propagation_distance_m, self.wavelength_m
        )

        # 5. Calculate PSF for each component and sum them
        # PSF is |E_field_sensor|^2
        psf_Ex_n1hw = torch.abs(Ex_sensor_n1hw)**2
        psf_Ey_n1hw = torch.abs(Ey_sensor_n1hw)**2
        
        total_psf_n1hw = psf_Ex_n1hw + psf_Ey_n1hw # Resulting PSF is (N, 1, H, W)

        return total_psf_n1hw

# --- Example Custom Loss Function ---
def example_psf_loss(psf_n1hw, target_psf_n1hw=None):
    if target_psf_n1hw is not None:
        return torch.mean((psf_n1hw - target_psf_n1hw)**2)
    else:
        N, C, H, W = psf_n1hw.shape
        psf_peaks = torch.amax(psf_n1hw.view(N, -1), dim=1)
        return -torch.mean(psf_peaks)

# --- Main Training Loop Example ---
if __name__ == '__main__':
    print("PyTorch Zernike Optimizer (Polarized Input) Prototyping")
    params = {
        'num_zernike_coeffs': 5,
        'wavelength_m': 550e-9,
        'pupil_diameter_m': 5e-3,
        'propagation_distance_m': 50e-3,
        'grid_size_h': 64, # Smaller grid for faster demo
        'grid_size_w': 64,
        'device': 'cuda' if torch.cuda.is_available() else 'cpu',
        'learning_rate': 1e-2,
        'num_epochs': 50, # Fewer epochs for quick demo
        'batch_size': 2,
    }
    print(f"Using device: {params['device']}")
    model = ZernikePSFOptimizerPolarizedPT(params).to(params['device'])
    optimizer = torch.optim.Adam(model.parameters(), lr=params['learning_rate'])

    # Example dummy input E-field data (N, 2, H, W)
    pupil_sample_dy = params['pupil_diameter_m'] / params['grid_size_h']
    pupil_sample_dx = params['pupil_diameter_m'] / params['grid_size_w']
    y_p = (torch.arange(params['grid_size_h'], device=params['device']) - params['grid_size_h'] // 2) * pupil_sample_dy
    x_p = (torch.arange(params['grid_size_w'], device=params['device']) - params['grid_size_w'] // 2) * pupil_sample_dx
    Y_p, X_p = torch.meshgrid(y_p, x_p, indexing='ij')
    
    # Ex component: Gaussian beam
    w0_ex = (params['pupil_diameter_m'] / 2) * 0.4
    amp_ex = torch.exp(-(X_p**2 + Y_p**2) / (w0_ex**2))
    phase_ex = torch.zeros_like(amp_ex) # Plane wave
    E_complex_ex = amp_ex * torch.exp(1j * phase_ex)

    # Ey component: Gaussian beam, slightly different or with a phase ramp for variety
    w0_ey = (params['pupil_diameter_m'] / 2) * 0.5
    amp_ey = torch.exp(-(X_p**2 + Y_p**2) / (w0_ey**2))
    phase_ey = (X_p / (params['pupil_diameter_m']/2)) * torch.pi # Example phase ramp on Ey
    E_complex_ey = amp_ey * torch.exp(1j * phase_ey)

    # Stack Ex and Ey to form (1, 2, H, W)
    single_E_field_12hw = torch.stack([E_complex_ex, E_complex_ey], dim=0).unsqueeze(0)
    dummy_input_E_batch_n2hw = single_E_field_12hw.repeat(params['batch_size'], 1, 1, 1).to(params['device'])
    
    print(f"Input E-field batch shape: {dummy_input_E_batch_n2hw.shape}")
    print(f"Initial Zernike coeffs: {model.zernike_coeffs.data.cpu().numpy()}")

    for epoch in range(params['num_epochs']):
        model.train()
        psf_output_n1hw = model(dummy_input_E_batch_n2hw)
        loss = example_psf_loss(psf_output_n1hw)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        if (epoch + 1) % 10 == 0 or epoch == 0:
            print(f"Epoch [{epoch+1}/{params['num_epochs']}], Loss: {loss.item():.6e}")

    print("Training finished.")
    print(f"Final Zernike coeffs: {model.zernike_coeffs.data.cpu().numpy()}")

    # Example: Get a PSF after training
    model.eval()
    with torch.no_grad():
        final_psf = model(dummy_input_E_batch_n2hw[0:1,...]) # PSF for one input
        print(f"Shape of a single output PSF: {final_psf.shape}")
        # import matplotlib.pyplot as plt
        # plt.imshow(final_psf.squeeze().cpu().numpy())
        # plt.colorbar(); plt.title("Zernike Optimized PSF (Ex^2+Ey^2)"); plt.show()

