import torch
import torch.nn as nn
import torch.fft
import numpy as np
import math

# --- Utility and Helper Functions (propagate_fresnel_pytorch, create_grid remain the same) ---

def create_grid(H, W, dx_m, device='cpu'):
    """
    Creates spatial and frequency grids.

    Args:
        H (int): Height of the grid.
        W (int): Width of the grid.
        dx_m (float or tuple): Pixel pitch in meters (dy_m, dx_m). If float, assumes square pixels.
        device (str): PyTorch device.

    Returns:
        x_coords (torch.Tensor): X coordinates (m).
        y_coords (torch.Tensor): Y coordinates (m).
        fx_coords (torch.Tensor): X spatial frequencies (1/m).
        fy_coords (torch.Tensor): Y spatial frequencies (1/m).
    """
    if isinstance(dx_m, float):
        dy_m = dx_m
    else:
        dy_m, dx_m = dx_m

    x = torch.arange(-W // 2, W // 2, device=device) * dx_m
    y = torch.arange(-H // 2, H // 2, device=device) * dy_m
    y_coords, x_coords = torch.meshgrid(y, x, indexing='ij')

    fx_cycles_sample = torch.fft.fftfreq(W, d=1.0, device=device)
    fy_cycles_sample = torch.fft.fftfreq(H, d=1.0, device=device)

    fy_coords_mesh, fx_coords_mesh = torch.meshgrid(fy_cycles_sample, fx_cycles_sample, indexing='ij')
    fy_coords_phys_mesh = fy_coords_mesh / dy_m
    fx_coords_phys_mesh = fx_coords_mesh / dx_m

    return x_coords, y_coords, fx_coords_phys_mesh, fy_coords_phys_mesh


def propagate_fresnel_pytorch(input_field_nchw, dx_m, dist_m, wavelength_m):
    """
    Fresnel propagation using the single Fourier transform (convolutional) method.

    Args:
        input_field_nchw (torch.Tensor): Input complex E-field (N, C, H, W). Assumes C=1.
        dx_m (float or tuple): Pixel pitch at input plane (m). (dy, dx) or single value for square.
        dist_m (float): Propagation distance (m).
        wavelength_m (float): Wavelength of light (m).

    Returns:
        torch.Tensor: Output complex E-field at sensor plane (N, C, H, W).
    """
    N, C, H, W = input_field_nchw.shape
    device = input_field_nchw.device

    if C != 1:
        raise ValueError("propagate_fresnel_pytorch expects input_field_nchw with C=1")

    input_field = input_field_nchw.squeeze(1) # Shape (N, H, W)

    if isinstance(dx_m, float):
        dy_m_in = dx_m
        dx_m_in = dx_m
    else:
        dy_m_in, dx_m_in = dx_m

    x_coords_in, y_coords_in, fx_coords_prop, fy_coords_prop = create_grid(H, W, (dy_m_in, dx_m_in), device=device)

    quad_phase_factor_in = torch.exp(
        1j * torch.pi / (wavelength_m * dist_m) * (x_coords_in**2 + y_coords_in**2)
    ).unsqueeze(0)

    U_prime = input_field * quad_phase_factor_in
    G = torch.fft.fft2(U_prime, norm='ortho')

    propagator_freq = torch.exp(
        1j * torch.pi * wavelength_m * dist_m * (fx_coords_prop**2 + fy_coords_prop**2)
    ).unsqueeze(0)

    Result_freq = G * propagator_freq
    U_sensor_scaled = torch.fft.ifft2(Result_freq, norm='ortho')

    final_scaling_phase = torch.exp(1j * 2 * torch.pi * dist_m / wavelength_m) / \
                          (1j * wavelength_m * dist_m)
    
    output_field = U_sensor_scaled * final_scaling_phase
    return output_field.unsqueeze(1)


# --- Optical System Module ---
class FreeformPhasePlateOptimizerPT(nn.Module):
    def __init__(self, params):
        super().__init__()
        self.params = params
        self.device = params.get('device', 'cuda' if torch.cuda.is_available() else 'cpu')

        # Optical parameters
        self.wavelength_m = params['wavelength_m']
        self.pupil_diameter_m = params['pupil_diameter_m'] # Used for aperture and dx/dy calculation
        self.propagation_distance_m = params['propagation_distance_m']
        self.grid_size_h = params['grid_size_h']
        self.grid_size_w = params['grid_size_w']
        
        # Pixel pitch at pupil plane (element plane)
        self.pupil_sample_dy_m = self.pupil_diameter_m / self.grid_size_h
        self.pupil_sample_dx_m = self.pupil_diameter_m / self.grid_size_w

        # --- Learnable Parameter: The phase plate itself ---
        # Initialize with zeros, or random values, or a guess (e.g., lens phase)
        initial_phase = torch.zeros((self.grid_size_h, self.grid_size_w), device=self.device)
        # Or, for example, a slight random initialization:
        # initial_phase = (torch.rand((self.grid_size_h, self.grid_size_w), device=self.device) - 0.5) * 0.1 * torch.pi
        self.learnable_phase_hw = nn.Parameter(initial_phase)
        # Shape of learnable_phase_hw will be (H, W)

        # Aperture mask (can be fixed or also learnable if needed, but typically fixed)
        # This defines the physical extent of your phase plate.
        y = torch.linspace(-self.grid_size_h // 2, self.grid_size_h // 2 -1, self.grid_size_h, device=self.device) * self.pupil_sample_dy_m
        x = torch.linspace(-self.grid_size_w // 2, self.grid_size_w // 2 -1, self.grid_size_w, device=self.device) * self.pupil_sample_dx_m
        Y, X = torch.meshgrid(y, x, indexing='ij')
        
        # Define the aperture based on the pupil diameter.
        # The phase outside this aperture should ideally not affect the field,
        # or the learnable phase should be constrained/multiplied by this aperture.
        R_sq = X**2 + Y**2
        pupil_radius_sq = (self.pupil_diameter_m / 2)**2
        aperture_mask = (R_sq <= pupil_radius_sq).float() # Shape (H,W)
        self.register_buffer('aperture_mask_hw', aperture_mask)


    def forward(self, input_E_complex_nchw):
        """
        Args:
            input_E_complex_nchw (torch.Tensor): Input complex E-field (N, 1, H, W).
        """
        # 1. Get the learnable phase. It's already in the correct H, W shape.
        # The learnable_phase_hw directly represents the phase shift.
        # Reshape for broadcasting: [1, 1, H, W]
        phase_shift_11hw = self.learnable_phase_hw.unsqueeze(0).unsqueeze(0)

        # 2. Apply phase shift to input E-field
        # E_out = E_in * exp(i * phase_shift)
        E_field_pupil_out_n1hw = input_E_complex_nchw * torch.exp(1j * phase_shift_11hw)
        
        # 3. Apply the fixed aperture mask to the field *after* the phase element.
        # This ensures that only the part of the E-field passing through the
        # physical extent of the phase plate is propagated.
        # aperture_mask_hw is (H,W), unsqueeze to (1,1,H,W) for broadcasting
        E_field_apertured_n1hw = E_field_pupil_out_n1hw * self.aperture_mask_hw.unsqueeze(0).unsqueeze(0)

        # 4. Propagate to sensor plane
        E_field_sensor_n1hw = propagate_fresnel_pytorch(
            E_field_apertured_n1hw,
            dx_m=(self.pupil_sample_dy_m, self.pupil_sample_dx_m),
            dist_m=self.propagation_distance_m,
            wavelength_m=self.wavelength_m
        )

        # 5. Calculate PSF (intensity)
        psf_n1hw = torch.abs(E_field_sensor_n1hw)**2

        return psf_n1hw

# --- Example Custom Loss Function (remains the same) ---
def example_psf_loss(psf_n1hw, target_psf_n1hw=None):
    if target_psf_n1hw is not None:
        return torch.mean((psf_n1hw - target_psf_n1hw)**2)
    else:
        N, C, H, W = psf_n1hw.shape
        psf_peaks = torch.amax(psf_n1hw.view(N, -1), dim=1)
        return -torch.mean(psf_peaks)


# --- Main Training Loop Example (Adjust model instantiation) ---
if __name__ == '__main__':
    print("PyTorch Freeform Phase Plate Optimizer Prototyping")

    # --- Define parameters ---
    params = {
        # No num_zernike_coeffs needed anymore
        'wavelength_m': 550e-9,
        'pupil_diameter_m': 5e-3, # This defines the physical area of the learnable phase
        'propagation_distance_m': 50e-3,
        'grid_size_h': 64,        # Keep grid size manageable for direct pixel learning
        'grid_size_w': 64,
        'device': 'cuda' if torch.cuda.is_available() else 'cpu',
        'learning_rate': 1e-3, # May need adjustment for pixel-wise learning
        'num_epochs': 200,
        'batch_size': 4,
    }
    print(f"Using device: {params['device']}")

    # Instantiate the model
    model = FreeformPhasePlateOptimizerPT(params).to(params['device'])

    # Optimizer - will optimize model.learnable_phase_hw
    optimizer = torch.optim.Adam(model.parameters(), lr=params['learning_rate'])

    # Example dummy input E-field data (same as before)
    pupil_sample_dy = params['pupil_diameter_m'] / params['grid_size_h']
    pupil_sample_dx = params['pupil_diameter_m'] / params['grid_size_w']
    y_p = (torch.arange(params['grid_size_h'], device=params['device']) - params['grid_size_h'] // 2) * pupil_sample_dy
    x_p = (torch.arange(params['grid_size_w'], device=params['device']) - params['grid_size_w'] // 2) * pupil_sample_dx
    Y_p, X_p = torch.meshgrid(y_p, x_p, indexing='ij')
    beam_waist_factor = 0.4
    w0 = (params['pupil_diameter_m'] / 2) * beam_waist_factor
    gaussian_amplitude = torch.exp(-(X_p**2 + Y_p**2) / (w0**2))
    phase = torch.zeros_like(gaussian_amplitude)
    single_E_field = (gaussian_amplitude * torch.exp(1j * phase)).unsqueeze(0).unsqueeze(0)
    dummy_input_E_batch = single_E_field.repeat(params['batch_size'], 1, 1, 1).to(params['device'])
    
    print(f"Shape of learnable phase plate: {model.learnable_phase_hw.shape}")
    print(f"Initial learnable phase (center value): {model.learnable_phase_hw.data[params['grid_size_h']//2, params['grid_size_w']//2].item()}")

    # --- Training loop ---
    for epoch in range(params['num_epochs']):
        model.train()
        psf_output_n1hw = model(dummy_input_E_batch)
        loss = example_psf_loss(psf_output_n1hw) # Use your custom loss
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if (epoch + 1) % 20 == 0 or epoch == 0:
            print(f"Epoch [{epoch+1}/{params['num_epochs']}], Loss: {loss.item():.6e}")
            # You might want to add regularization to the learnable_phase_hw
            # e.g., to promote smoothness, if needed.

    print("Training finished.")
    # The optimized phase plate is model.learnable_phase_hw.data
    # print(f"Final learnable phase (center value): {model.learnable_phase_hw.data[params['grid_size_h']//2, params['grid_size_w']//2].item()}")

    # --- Example: Visualize the learned phase plate ---
    # import matplotlib.pyplot as plt
    # learned_phase = model.learnable_phase_hw.data.cpu().numpy()
    # plt.imshow(learned_phase, cmap='twilight_shifted') # 'hsv' or 'twilight_shifted' are good for phase
    # plt.colorbar(label="Learned Phase (radians)")
    # plt.title("Optimized Freeform Phase Plate")
    # plt.show()
